type Applicant {
  email: String!
  id: ID!
  name: String!
  tags: [String!]!
}

"""
The connection type for Applicant.
"""
type ApplicantConnection {
  """
  A list of edges.
  """
  edges: [ApplicantEdge]

  """
  A list of nodes.
  """
  nodes: [Applicant!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ApplicantEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Applicant
}

enum ApplicantSortCriterion {
  """
  Sort list of applicants by creation time
  """
  CreatedAt

  """
  Sort list of applicants alphabetically
  """
  Name

  """
  Sort list of applicants by last activity time
  """
  UpdatedAt
}

"""
Autogenerated return type of ArchiveCoachNote.
"""
type ArchiveCoachNotePayload {
  success: Boolean!
}

"""
Autogenerated return type of ArchiveCourse.
"""
type ArchiveCoursePayload {
  success: Boolean!
}

"""
Autogenerated return type of ArchivePost.
"""
type ArchivePostPayload {
  success: Boolean!
}

"""
Autogenerated return type of AssignReviewer.
"""
type AssignReviewerPayload {
  reviewer: UserProxy!
}

type AudioBlock {
  filename: String!
  title: String!
  url: String!
}

"""
Autogenerated return type of AutoVerifySubmission.
"""
type AutoVerifySubmissionPayload {
  levelUpEligibility: LevelUpEligibility
  submission: Submission
}

"""
Autogenerated return type of BeginProcessingSubmissionReport.
"""
type BeginProcessingSubmissionReportPayload {
  success: Boolean!
}

type Certificate {
  active: Boolean!
  course: Course!
  createdAt: ISO8601DateTime!
  fontSize: Int!
  id: ID!
  margin: Int!
  name: String!
  nameOffsetTop: Int!
  qrCorner: String!
  qrScale: Int!
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated return type of CloneCourse.
"""
type CloneCoursePayload {
  success: Boolean!
}

"""
Autogenerated return type of CloneLevel.
"""
type CloneLevelPayload {
  success: Boolean!
}

type Coach {
  cohorts(courseId: ID!): [Cohort!]!
  id: ID!
  students(courseId: ID!): [Student!]!
  user: User!
}

type CoachNote {
  author: User
  createdAt: ISO8601DateTime!
  id: ID!
  note: String!
}

type CoachStats {
  pendingSubmissions: Int!
  reviewedSubmissions: Int!
}

type Cohort {
  coachesCount: Int!
  course: Course!
  courseId: String!
  description: String
  endsAt: ISO8601DateTime
  id: ID!
  name: String!
  studentsCount: Int!
}

"""
The connection type for Cohort.
"""
type CohortConnection {
  """
  A list of edges.
  """
  edges: [CohortEdge]

  """
  A list of nodes.
  """
  nodes: [Cohort!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CohortEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Cohort
}

enum CommunitySearchByFilter {
  """
  To search for topics by post body
  """
  content

  """
  To search for topics by title
  """
  title
}

input CommunitySearchFilter {
  search: String!
  searchBy: CommunitySearchByFilter!
}

"""
Autogenerated return type of ConcludeSubmissionReport.
"""
type ConcludeSubmissionReportPayload {
  success: Boolean!
}

union Content = AudioBlock | EmbedBlock | FileBlock | ImageBlock | MarkdownBlock

type ContentBlock {
  blockType: String!
  content: Content!
  id: ID!
  sortIndex: Int!
}

type Course {
  about: String
  archivedAt: ISO8601DateTime
  certificates: [Certificate!]!
  coaches: [UserProxy!]!
  coachesCount: Int!
  cohorts: [Cohort!]!
  cohortsCount: Int!
  cover: Image
  defaultCohort: Cohort
  description: String!
  enableLeaderboard: Boolean!
  featured: Boolean!
  highlights: [CourseHighlight!]!
  id: ID!
  levels: [Level!]!
  levelsCount: Int!
  name: String!
  processingUrl: String
  progressionBehavior: ProgressionBehavior!
  progressionLimit: Int
  publicPreview: Boolean!
  publicSignup: Boolean!
  studentTags: [String!]!
  thumbnail: Image
}

"""
The connection type for Course.
"""
type CourseConnection {
  """
  A list of edges.
  """
  edges: [CourseEdge]

  """
  A list of nodes.
  """
  nodes: [Course!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CourseEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Course
}

type CourseExport {
  createdAt: ISO8601DateTime!
  exportType: Export!
  id: ID!
  includeInactiveStudents: Boolean!
  reviewedOnly: Boolean!
  tags: [String!]!
}

type CourseHighlight {
  description: String!
  icon: String!
  title: String!
}

input CourseHighlightInput {
  description: String!
  icon: String!
  title: String!
}

enum CourseResource {
  """
  Coaches in the course
  """
  Coach

  """
  Cohorts in the course
  """
  Cohort

  """
  Levels in the course
  """
  Level

  """
  Student tags in the course
  """
  StudentTag

  """
  User tags in the course
  """
  UserTag
}

type CourseResourceInfo {
  resource: CourseResource!
  values: [String!]!
}

enum CourseStatus {
  """
  List of active courses
  """
  Active

  """
  List of archived courses
  """
  Archived

  """
  List of ended courses
  """
  Ended
}

"""
Autogenerated return type of CreateCoachNote.
"""
type CreateCoachNotePayload {
  coachNote: CoachNote
}

"""
Autogenerated return type of CreateCohort.
"""
type CreateCohortPayload {
  cohort: Cohort
}

"""
Autogenerated return type of CreateCommunity.
"""
type CreateCommunityPayload {
  id: String
}

"""
Autogenerated return type of CreateCourseAuthor.
"""
type CreateCourseAuthorPayload {
  courseAuthor: UserProxy
}

"""
Autogenerated return type of CreateCourseExport.
"""
type CreateCourseExportPayload {
  courseExport: CourseExport
}

"""
Autogenerated return type of CreateCourse.
"""
type CreateCoursePayload {
  course: Course
}

"""
Autogenerated return type of CreateEmbedContentBlock.
"""
type CreateEmbedContentBlockPayload {
  contentBlock: ContentBlock
}

"""
Autogenerated return type of CreateEvaluationCriterion.
"""
type CreateEvaluationCriterionPayload {
  evaluationCriterion: EvaluationCriterion
}

"""
Autogenerated return type of CreateFeedback.
"""
type CreateFeedbackPayload {
  success: Boolean!
}

"""
Autogenerated return type of CreateGrading.
"""
type CreateGradingPayload {
  success: Boolean!
}

"""
Autogenerated return type of CreateMarkdownContentBlock.
"""
type CreateMarkdownContentBlockPayload {
  contentBlock: ContentBlock
}

"""
Autogenerated return type of CreatePostLike.
"""
type CreatePostLikePayload {
  success: Boolean!
}

"""
Autogenerated return type of CreatePost.
"""
type CreatePostPayload {
  postId: ID
}

"""
Autogenerated return type of CreateQuizSubmission.
"""
type CreateQuizSubmissionPayload {
  levelUpEligibility: LevelUpEligibility
  submission: Submission
}

"""
Autogenerated return type of CreateSchoolAdmin.
"""
type CreateSchoolAdminPayload {
  schoolAdmin: UserProxy
}

"""
Autogenerated return type of CreateSchoolLink.
"""
type CreateSchoolLinkPayload {
  schoolLink: SchoolLink
}

"""
Autogenerated return type of CreateStudentFromApplicant.
"""
type CreateStudentFromApplicantPayload {
  success: Boolean!
}

"""
Autogenerated return type of CreateStudents.
"""
type CreateStudentsPayload {
  studentIds: [ID!]
}

"""
Autogenerated return type of CreateSubmission.
"""
type CreateSubmissionPayload {
  levelUpEligibility: LevelUpEligibility
  submission: Submission
}

type CreateTarget {
  contentBlockId: ID!
  id: ID!
  sampleContent: String!
}

"""
Autogenerated return type of CreateTarget.
"""
type CreateTargetPayload {
  target: CreateTarget
}

"""
Autogenerated return type of CreateTargetVersion.
"""
type CreateTargetVersionPayload {
  success: Boolean!
}

"""
Autogenerated return type of CreateTeam.
"""
type CreateTeamPayload {
  team: Team
}

"""
Autogenerated return type of CreateTopicCategory.
"""
type CreateTopicCategoryPayload {
  id: ID
}

"""
Autogenerated return type of CreateTopic.
"""
type CreateTopicPayload {
  topicId: ID
}

"""
Autogenerated return type of CreateTopicSubscription.
"""
type CreateTopicSubscriptionPayload {
  success: Boolean!
}

"""
Autogenerated return type of CreateVimeoVideo.
"""
type CreateVimeoVideoPayload {
  vimeoVideo: VimeoVideo
}

"""
Autogenerated return type of CreateWebPushSubscription.
"""
type CreateWebPushSubscriptionPayload {
  success: Boolean!
}

"""
Autogenerated return type of DeleteAccount.
"""
type DeleteAccountPayload {
  success: Boolean!
}

"""
Autogenerated return type of DeleteCertificate.
"""
type DeleteCertificatePayload {
  success: Boolean!
}

"""
Autogenerated return type of DeleteCoachStudentEnrollment.
"""
type DeleteCoachStudentEnrollmentPayload {
  success: Boolean!
}

"""
Autogenerated return type of DeleteContentBlock.
"""
type DeleteContentBlockPayload {
  success: Boolean!
}

"""
Autogenerated return type of DeleteCourseAuthor.
"""
type DeleteCourseAuthorPayload {
  success: Boolean!
}

"""
Autogenerated return type of DeletePostLike.
"""
type DeletePostLikePayload {
  success: Boolean!
}

"""
Autogenerated return type of DeleteSchoolAdmin.
"""
type DeleteSchoolAdminPayload {
  success: Boolean!
}

"""
Autogenerated return type of DeleteTopicCategory.
"""
type DeleteTopicCategoryPayload {
  success: Boolean!
}

"""
Autogenerated return type of DeleteTopicSubscription.
"""
type DeleteTopicSubscriptionPayload {
  success: Boolean!
}

"""
Autogenerated return type of DeleteWebPushSubscription.
"""
type DeleteWebPushSubscriptionPayload {
  success: Boolean!
}

"""
Autogenerated return type of DestroySchoolLink.
"""
type DestroySchoolLinkPayload {
  success: Boolean!
}

"""
Autogenerated return type of DestroyTeam.
"""
type DestroyTeamPayload {
  success: Boolean!
}

type DistributionInLevel {
  filterName: String!
  id: ID!
  number: Int!
  studentsInLevel: Int!
  unlocked: Boolean!
}

"""
Autogenerated return type of DropoutStudent.
"""
type DropoutStudentPayload {
  success: Boolean!
}

type EmbedBlock {
  embedCode: String
  lastResolvedAt: String
  requestSource: EmbedRequestSource!
  url: String!
}

enum EmbedRequestSource {
  """
  An embed whose source URL has been supplied by the user
  """
  User

  """
  An embed whose source URL has been generated as a result of an upload to Vimeo
  """
  VimeoUpload
}

type EvaluationCriterion {
  gradeLabels: [GradeAndLabel!]!
  id: ID!
  maxGrade: Int!
  name: String!
}

type EvaluationCriterionAverage {
  averageGrade: Float!
  evaluationCriterionId: ID!
}

enum Export {
  """
  An export of student-related data
  """
  Students

  """
  An export of team-related data
  """
  Teams
}

type FileBlock {
  filename: String!
  title: String!
  url: String!
}

type Grade {
  evaluationCriterionId: ID!
  grade: Int!
}

type GradeAndLabel {
  grade: Int!
  label: String!
}

input GradeAndLabelInput {
  grade: Int!
  label: String!
}

input GradeInput {
  evaluationCriterionId: ID!
  grade: Int!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Image {
  filename: String!
  url: String!
}

type ImageBlock {
  caption: String!
  filename: String!
  url: String!
  width: ImageWidth!
}

enum ImageWidth {
  Auto
  FourFifths
  Full
  ThreeFifths
  TwoFifths
}

"""
Autogenerated return type of InitiateAccountDeletion.
"""
type InitiateAccountDeletionPayload {
  success: Boolean!
}

"""
Autogenerated return type of IssueCertificate.
"""
type IssueCertificatePayload {
  issuedCertificate: IssuedCertificate
}

type IssuedCertificate {
  certificate: Certificate!
  createdAt: ISO8601DateTime!
  id: ID!
  issuedBy: String!
  name: String!
  revokedAt: ISO8601DateTime
  revokedBy: String
  serialNumber: String!
  updatedAt: ISO8601DateTime!
  user: User!
}

"""
Represents untyped JSON
"""
scalar JSON

type Level {
  id: ID!
  name: String!
  number: Int!
}

enum LevelUpEligibility {
  """
  This student is already at the max level
  """
  AtMaxLevel

  """
  This student has not done the required work in the current level
  """
  CurrentLevelIncomplete

  """
  The next level is yet to be unlocked
  """
  DateLocked

  """
  This student is eligible to level up
  """
  Eligible

  """
  There are no milestone targets in the student's level
  """
  NoMilestonesInLevel

  """
  This student has incomplete targets in a previous level
  """
  PreviousLevelIncomplete

  """
  This student's team-mates have not done the required work for leveling up
  """
  TeamMembersPending
}

"""
Autogenerated return type of LevelUp.
"""
type LevelUpPayload {
  success: Boolean!
}

"""
Autogenerated return type of LockTopic.
"""
type LockTopicPayload {
  success: Boolean!
}

"""
Autogenerated return type of MarkAllNotifications.
"""
type MarkAllNotificationsPayload {
  success: Boolean!
}

"""
Autogenerated return type of MarkNotification.
"""
type MarkNotificationPayload {
  success: Boolean!
}

"""
Autogenerated return type of MarkPostAsSolution.
"""
type MarkPostAsSolutionPayload {
  success: Boolean!
}

type MarkdownBlock {
  markdown: String!
}

"""
Autogenerated return type of MergeCohort.
"""
type MergeCohortPayload {
  success: Boolean!
}

"""
Autogenerated return type of MergeLevels.
"""
type MergeLevelsPayload {
  success: Boolean!
}

"""
Autogenerated return type of MoveContentBlock.
"""
type MoveContentBlockPayload {
  success: Boolean!
}

enum MoveDirection {
  """
  Move something down
  """
  Down

  """
  Move something up
  """
  Up
}

"""
Autogenerated return type of MoveSchoolLink.
"""
type MoveSchoolLinkPayload {
  success: Boolean!
}

type Mutation {
  """
  Archives a coach note for student
  """
  archiveCoachNote(id: ID!): ArchiveCoachNotePayload!

  """
  Archives a course.
  """
  archiveCourse(id: ID!): ArchiveCoursePayload!

  """
  Archive a community post
  """
  archivePost(id: ID!): ArchivePostPayload!

  """
  Assign reviewer for a submission
  """
  assignReviewer(submissionId: ID!): AssignReviewerPayload!

  """
  Auto verify target
  """
  autoVerifySubmission(targetId: ID!): AutoVerifySubmissionPayload!

  """
  Create in progress report for a submission
  """
  beginProcessingSubmissionReport(heading: String, report: String, reporter: String!, submissionId: ID!, targetUrl: String): BeginProcessingSubmissionReportPayload!

  """
  Make a clone of a given course.
  """
  cloneCourse(id: ID!): CloneCoursePayload!

  """
  Clone level into given course
  """
  cloneLevel(cloneIntoCourseId: ID!, levelId: ID!): CloneLevelPayload!

  """
  Create completed report for a submission
  """
  concludeSubmissionReport(heading: String, report: String, reporter: String!, status: SubmissionReportStatus!, submissionId: ID!, targetUrl: String): ConcludeSubmissionReportPayload!

  """
  Create a coach note.
  """
  createCoachNote(note: String!, studentId: ID!): CreateCoachNotePayload!

  """
  Create a new cohort
  """
  createCohort(courseId: ID, description: String, endsAt: ISO8601DateTime, name: String!): CreateCohortPayload!

  """
  Create a new community
  """
  createCommunity(courseIds: [ID!], name: String!, targetLinkable: Boolean!): CreateCommunityPayload!

  """
  Create a new course.
  """
  createCourse(about: String, description: String!, featured: Boolean!, highlights: [CourseHighlightInput!], name: String!, processingUrl: String, progressionBehavior: ProgressionBehavior!, progressionLimit: Int, publicPreview: Boolean!, publicSignup: Boolean!): CreateCoursePayload!

  """
  Create a new author in a course
  """
  createCourseAuthor(courseId: ID!, email: String!, name: String!): CreateCourseAuthorPayload!

  """
  Request a course export.
  """
  createCourseExport(courseId: ID!, exportType: Export!, includeInactiveStudents: Boolean!, reviewedOnly: Boolean!, tagIds: [ID!]!): CreateCourseExportPayload!

  """
  Creates an embed content block.
  """
  createEmbedContentBlock(aboveContentBlockId: ID, requestSource: EmbedRequestSource!, targetId: ID!, url: String!): CreateEmbedContentBlockPayload!

  """
  Create a new evaluation criterion.
  """
  createEvaluationCriterion(courseId: ID!, gradesAndLabels: [GradeAndLabelInput!]!, maxGrade: Int!, name: String!): CreateEvaluationCriterionPayload!

  """
  Create feedback for submission
  """
  createFeedback(feedback: String!, submissionId: ID!): CreateFeedbackPayload!

  """
  Create grading for submission
  """
  createGrading(checklist: JSON!, feedback: String, grades: [GradeInput!], note: String, submissionId: ID!): CreateGradingPayload!

  """
  Creates a markdown content block.
  """
  createMarkdownContentBlock(aboveContentBlockId: ID, targetId: ID!): CreateMarkdownContentBlockPayload!

  """
  Create a new post in a topic
  """
  createPost(body: String!, replyToPostId: ID, topicId: ID!): CreatePostPayload!

  """
  Add a like for the post
  """
  createPostLike(postId: ID!): CreatePostLikePayload!

  """
  Create quiz submission
  """
  createQuizSubmission(answerIds: [ID!], targetId: ID!): CreateQuizSubmissionPayload!

  """
  Create a new school admin
  """
  createSchoolAdmin(email: String!, name: String!): CreateSchoolAdminPayload!

  """
  Create a school link.
  """
  createSchoolLink(kind: String!, title: String, url: String!): CreateSchoolLinkPayload!

  """
  Create student from applicant record
  """
  createStudentFromApplicant(affiliation: String, applicantId: ID!, notifyStudent: Boolean, tags: [String!]!, title: String): CreateStudentFromApplicantPayload!

  """
  Add one or more students to a course
  """
  createStudents(cohortId: ID!, notifyStudents: Boolean!, students: [StudentEnrollmentInput!]!): CreateStudentsPayload!

  """
  Create a new submission for a target
  """
  createSubmission(checklist: JSON!, fileIds: [ID!]!, targetId: ID!): CreateSubmissionPayload!

  """
  Create a new target.
  """
  createTarget(targetGroupId: String!, title: String!): CreateTargetPayload!

  """
  Update a target
  """
  createTargetVersion(targetVersionId: ID!): CreateTargetVersionPayload!

  """
  Create a new team
  """
  createTeam(cohortId: ID, name: String!, studentIds: [ID!]!): CreateTeamPayload!

  """
  Create a new topic of discussion in a community
  """
  createTopic(body: String!, communityId: ID!, targetId: ID, title: String!, topicCategoryId: ID): CreateTopicPayload!

  """
  Create a category in community.
  """
  createTopicCategory(communityId: ID!, name: String!): CreateTopicCategoryPayload!

  """
  Create a topic subscription.
  """
  createTopicSubscription(topicId: ID!): CreateTopicSubscriptionPayload!

  """
  Create Vimeo upload URI
  """
  createVimeoVideo(description: String, size: Int!, targetId: ID!, title: String): CreateVimeoVideoPayload!

  """
  Create web push subscription
  """
  createWebPushSubscription(auth: String!, endpoint: String!, p256dh: String!): CreateWebPushSubscriptionPayload!

  """
  Delete user account permanently
  """
  deleteAccount(token: String!): DeleteAccountPayload!

  """
  Delete an un-issued certificate
  """
  deleteCertificate(id: ID!): DeleteCertificatePayload!

  """
  Deletes an assigned student for a coach
  """
  deleteCoachStudentEnrollment(coachId: ID!, studentId: ID!): DeleteCoachStudentEnrollmentPayload!

  """
  Deletes a target content block.
  """
  deleteContentBlock(id: ID!): DeleteContentBlockPayload!

  """
  Delete a course author
  """
  deleteCourseAuthor(id: ID!): DeleteCourseAuthorPayload!

  """
  Delete a like for some post
  """
  deletePostLike(postId: ID!): DeletePostLikePayload!

  """
  Delete a school admin
  """
  deleteSchoolAdmin(id: ID!): DeleteSchoolAdminPayload!

  """
  Destroy a category in community.
  """
  deleteTopicCategory(id: ID!): DeleteTopicCategoryPayload!

  """
  Unsubscribe from a topic
  """
  deleteTopicSubscription(topicId: ID!): DeleteTopicSubscriptionPayload!

  """
  Delete web push subscription
  """
  deleteWebPushSubscription: DeleteWebPushSubscriptionPayload!

  """
  Destroy a school link.
  """
  destroySchoolLink(id: ID!): DestroySchoolLinkPayload!

  """
  Destroy team
  """
  destroyTeam(teamId: ID): DestroyTeamPayload!

  """
  Mark student as exited
  """
  dropoutStudent(id: ID!): DropoutStudentPayload!

  """
  Delete user account
  """
  initiateAccountDeletion(email: String!): InitiateAccountDeletionPayload!

  """
  Issue a certificate to a student
  """
  issueCertificate(certificateId: ID!, studentId: ID!): IssueCertificatePayload!

  """
  Level up
  """
  levelUp(courseId: ID!): LevelUpPayload!

  """
  Lock a topic in community.
  """
  lockTopic(id: ID!): LockTopicPayload!

  """
  Mark all notifications as read
  """
  markAllNotifications: MarkAllNotificationsPayload!

  """
  Mark a notification as having been read
  """
  markNotification(notificationId: ID!): MarkNotificationPayload!

  """
  Mark a community post as a solution
  """
  markPostAsSolution(id: ID!): MarkPostAsSolutionPayload!

  """
  Merge cohorts
  """
  mergeCohort(deleteCohortId: ID!, mergeIntoCohortId: ID!): MergeCohortPayload!

  """
  Merge one level into another
  """
  mergeLevels(deleteLevelId: ID!, mergeIntoLevelId: ID!): MergeLevelsPayload!

  """
  Move a content block in a target up or down
  """
  moveContentBlock(direction: MoveDirection!, id: ID!): MoveContentBlockPayload!

  """
  Rearrange school links
  """
  moveSchoolLink(direction: MoveDirection!, id: ID!): MoveSchoolLinkPayload!

  """
  Create queued report for a submission
  """
  queueSubmissionReport(heading: String, report: String, reporter: String!, submissionId: ID!, targetUrl: String): QueueSubmissionReportPayload!

  """
  Re-activate student in a course
  """
  reActivateStudent(id: ID!): ReActivateStudentPayload!

  """
  Re-run the Github Action for a submission
  """
  reRunGithubAction(submissionId: ID): ReRunGithubActionPayload!

  """
  Reassign reviewer for a submission
  """
  reassignReviewer(submissionId: ID!): ReassignReviewerPayload!

  """
  Resolve embed code for a given content block
  """
  resolveEmbedCode(contentBlockId: ID!): ResolveEmbedCodePayload!

  """
  Revoke an issued certificate
  """
  revokeIssuedCertificate(issuedCertificateId: ID!): RevokeIssuedCertificatePayload!

  """
  Update email for current user
  """
  sendUpdateEmailToken(newEmail: String!): SendUpdateEmailTokenPayload!

  """
  Sort targets and target groups
  """
  sortCurriculumResources(resourceIds: [ID!]!, resourceType: String!): SortCurriculumResourcesPayload!

  """
  Un-archives a course.
  """
  unarchiveCourse(id: ID!): UnarchiveCoursePayload!

  """
  Unassign reviewer for a submission
  """
  unassignReviewer(submissionId: ID!): UnassignReviewerPayload!

  """
  Delete grading for the submission.
  """
  undoGrading(submissionId: ID!): UndoGradingPayload!

  """
  Delete the last submission for a target
  """
  undoSubmission(targetId: ID!): UndoSubmissionPayload!

  """
  Unlock a topic in community.
  """
  unlockTopic(id: ID!): UnlockTopicPayload!

  """
  Unmark a community post as a solution
  """
  unmarkPostAsSolution(id: ID!): UnmarkPostAsSolutionPayload!

  """
  Update a certificate
  """
  updateCertificate(active: Boolean!, fontSize: Int!, id: ID!, margin: Int!, name: String!, nameOffsetTop: Int!, qrCorner: QrCorner!, qrScale: Int!): UpdateCertificatePayload!

  """
  Update a cohort
  """
  updateCohort(cohortId: ID, description: String, endsAt: ISO8601DateTime, name: String!): UpdateCohortPayload!

  """
  Update a new community
  """
  updateCommunity(courseIds: [ID!], id: ID!, name: String!, targetLinkable: Boolean!): UpdateCommunityPayload!

  """
  Update a course.
  """
  updateCourse(about: String, defaultCohortId: ID!, description: String!, featured: Boolean!, highlights: [CourseHighlightInput!], id: ID!, name: String!, processingUrl: String, progressionBehavior: ProgressionBehavior!, progressionLimit: Int, publicPreview: Boolean!, publicSignup: Boolean!): UpdateCoursePayload!

  """
  Update a course author
  """
  updateCourseAuthor(id: ID!, name: String!): UpdateCourseAuthorPayload!

  """
  Update an evaluation criterion.
  """
  updateEvaluationCriterion(gradesAndLabels: [GradeAndLabelInput!]!, id: ID!, name: String!): UpdateEvaluationCriterionPayload!

  """
  Updates the title of a file block.
  """
  updateFileBlock(id: ID!, title: String): UpdateFileContentBlockPayload!

  """
  Updates the caption and the width of an image block.
  """
  updateImageBlock(caption: String, id: ID!, width: ImageWidth!): UpdateImageContentBlockPayload!

  """
  Updates the markdown content of a markdown block.
  """
  updateMarkdownBlock(id: ID!, markdown: String): UpdateMarkdownContentBlockPayload!

  """
  Update community post
  """
  updatePost(body: String!, editReason: String, id: ID!): UpdatePostPayload!

  """
  Update review checklist
  """
  updateReviewChecklist(reviewChecklist: JSON!, targetId: ID!): UpdateReviewChecklistPayload!

  """
  Update a School details
  """
  updateSchool(about: String!, name: String!): UpdateSchoolPayload!

  """
  Update school admin
  """
  updateSchoolAdmin(id: ID!, name: String!): UpdateSchoolAdminPayload!

  """
  Update school header/footer/social links
  """
  updateSchoolLink(id: ID!, title: String, url: String): UpdateSchoolLinkPayload!

  """
  Update a school string.
  """
  updateSchoolString(key: String!, value: String): UpdateSchoolStringPayload!

  """
  Update details of a student
  """
  updateStudentDetails(affiliation: String, coachIds: [ID!]!, cohortId: ID!, id: ID!, name: String!, taggings: [String!]!, title: String!): UpdateStudentDetailsPayload!

  """
  Update a target
  """
  updateTarget(checklist: JSON!, completionInstructions: String, evaluationCriteria: [ID!]!, id: ID!, linkToComplete: String, prerequisiteTargets: [ID!]!, quiz: [TargetQuizInput!]!, role: String!, targetGroupId: ID!, title: String!, visibility: String!): UpdateTargetPayload!

  """
  Update a new team
  """
  updateTeam(name: String!, studentIds: [ID!]!, teamId: ID): UpdateTeamPayload!

  """
  Update a topic
  """
  updateTopic(id: ID!, title: String!, topicCategoryId: ID): UpdateTopicPayload!

  """
  Update a category in community.
  """
  updateTopicCategory(id: ID!, name: String!): UpdateTopicCategoryPayload!

  """
  Update profile of a user
  """
  updateUser(about: String, confirmNewPassword: String, currentPassword: String, dailyDigest: Boolean!, locale: String!, name: String!, newPassword: String, preferredName: String): UpdateUserPayload!
}

type Notification {
  actor: User
  createdAt: ISO8601DateTime!
  event: NotificationEvent!
  id: ID!
  message: String!
  notifiableId: ID
  notifiableType: ID
  readAt: ISO8601DateTime
}

"""
The connection type for Notification.
"""
type NotificationConnection {
  """
  A list of edges.
  """
  edges: [NotificationEdge]

  """
  A list of nodes.
  """
  nodes: [Notification!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type NotificationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Notification
}

enum NotificationEvent {
  """
  Notification triggered when post is created
  """
  PostCreated

  """
  Notification triggered when topic is created
  """
  TopicCreated
}

enum NotificationStatus {
  """
  Notification that has been read
  """
  Read

  """
  Notification that is unread
  """
  Unread
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

enum ProgressionBehavior {
  """
  Allow students to level up a limited number of times
  """
  Limited

  """
  Allow students to level up only after getting submissions reviewed
  """
  Strict

  """
  Allow students to level up without getting submissions reviewed
  """
  Unlimited
}

enum QrCorner {
  """
  QR Code shown at the bottom-left
  """
  BottomLeft

  """
  QR Code shown at the bottom-right
  """
  BottomRight

  """
  QR Code not shown
  """
  Hidden

  """
  QR Code shown at the top-left
  """
  TopLeft

  """
  QR Code shown at the top-right
  """
  TopRight
}

type Query {
  applicant(applicantId: ID!): Applicant!
  applicants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    courseId: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String
    sortCriterion: ApplicantSortCriterion!
    sortDirection: SortDirection!
    tags: [String!]
  ): ApplicantConnection!
  coach(id: ID!): Coach!
  coachNotes(studentId: ID!): [CoachNote!]!
  coachStats(coachId: ID!, courseId: ID!): CoachStats!
  coaches(coachIds: [ID!], courseId: ID!): [UserProxy!]!
  cohort(id: ID!): Cohort!
  cohorts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    courseId: ID!
    filterString: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): CohortConnection!
  contentBlocks(targetId: ID!, targetVersionId: ID): [ContentBlock!]!
  course(id: ID!): Course!
  courseResourceInfo(courseId: ID!, resources: [CourseResource!]!): [CourseResourceInfo!]!
  courseStudents(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    courseId: ID!
    filterString: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StudentConnection!
  courses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    id: ID

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String
    status: CourseStatus
  ): CourseConnection!
  evaluationCriteria(courseId: ID!): [EvaluationCriterion!]!
  hasArchivedCoachNotes(studentId: ID!): Boolean!
  level(courseId: ID!, levelId: ID): Level
  levels(courseId: ID!): [Level!]!
  notifications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    event: NotificationEvent

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String
    status: NotificationStatus
  ): NotificationConnection!
  reviewedTargetsInfo(courseId: ID!): [TargetInfo!]!
  schoolStats: SchoolStats!
  similarTopics(communityId: ID!, title: String!): [Topic!]!
  student(studentId: ID!): Student!
  studentDetails(studentId: ID!): StudentDetails!
  studentDistribution(courseId: ID!, filterString: String): [DistributionInLevel!]!
  studentSubmissions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    levelId: ID
    sortDirection: SortDirection!
    status: SubmissionReviewStatus
    studentId: ID!
  ): StudentSubmissionConnection!
  submissionDetails(submissionId: ID!): SubmissionDetails!
  submissionReport(id: ID!): SubmissionReport!
  submissions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    assignedCoachId: ID

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    courseId: ID!
    excludeSubmissionId: ID

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    includeInactive: Boolean

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    levelId: ID
    personalCoachId: ID
    reviewingCoachId: ID
    search: String
    sortCriterion: SubmissionSortCriterion!
    sortDirection: SortDirection!
    status: SubmissionStatus
    targetId: ID
  ): SubmissionInfoConnection!
  targetDetails(targetId: ID!): TargetDetails!
  targetInfo(courseId: ID!, targetId: ID): TargetInfo
  targetVersions(targetId: ID!): [TargetVersion!]!
  team(id: ID!): Team!
  teams(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    courseId: ID!
    filterString: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TeamConnection!
  topics(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    communityId: ID!

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    resolution: TopicResolutionFilter!
    search: CommunitySearchFilter
    sortCriterion: TopicSortCriterion!
    sortDirection: SortDirection!
    targetId: ID
    topicCategoryId: ID
  ): TopicConnection!
}

"""
Autogenerated return type of QueueSubmissionReport.
"""
type QueueSubmissionReportPayload {
  success: Boolean!
}

"""
Autogenerated return type of ReActivateStudent.
"""
type ReActivateStudentPayload {
  success: Boolean!
}

"""
Autogenerated return type of ReRunGithubAction.
"""
type ReRunGithubActionPayload {
  success: Boolean!
}

"""
Autogenerated return type of ReassignReviewer.
"""
type ReassignReviewerPayload {
  reviewer: UserProxy!
}

"""
Autogenerated return type of ResolveEmbedCode.
"""
type ResolveEmbedCodePayload {
  embedCode: String
}

type ReviewChecklist {
  result: [ReviewChecklistResult!]!
  title: String!
}

type ReviewChecklistResult {
  feedback: String
  title: String!
}

type ReviewerDetail {
  assignedAt: ISO8601DateTime!
  user: UserProxy!
}

type ReviewerDetailInfo {
  assignedAt: ISO8601DateTime!
  name: String!
}

"""
Autogenerated return type of RevokeIssuedCertificate.
"""
type RevokeIssuedCertificatePayload {
  revokedCertificate: IssuedCertificate
}

type SchoolLink {
  id: ID!
  kind: String!
  sortIndex: Int!
  title: String
  url: String!
}

type SchoolStats {
  coachesCount: Int!
  studentsCount: Int!
}

"""
Autogenerated return type of SendUpdateEmailToken.
"""
type SendUpdateEmailTokenPayload {
  success: Boolean!
}

"""
Autogenerated return type of SortCurriculumResources.
"""
type SortCurriculumResourcesPayload {
  success: Boolean!
}

enum SortDirection {
  """
  Sort list in ascending order
  """
  Ascending

  """
  Sort list in descending order
  """
  Descending
}

type Student {
  cohort: Cohort!
  course: Course!
  droppedOutAt: ISO8601DateTime
  githubRepository: String
  id: ID!
  issuedCertificates: [IssuedCertificate!]!
  level: Level!
  personalCoaches: [UserProxy!]!
  taggings: [String!]!
  user: User!
}

"""
The connection type for Student.
"""
type StudentConnection {
  """
  A list of edges.
  """
  edges: [StudentEdge]

  """
  A list of nodes.
  """
  nodes: [Student!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type StudentDetails {
  averageGrades: [EvaluationCriterionAverage!]!
  completedLevelIds: [ID!]!
  email: String!
  evaluationCriteria: [EvaluationCriterion!]!
  quizScores: [String!]!
  student: Student!
  targetsCompleted: Int!
  targetsPendingReview: Int!
  team: Team
  totalTargets: Int!
}

"""
An edge in a connection.
"""
type StudentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Student
}

input StudentEnrollmentInput {
  affiliation: String
  email: String!
  name: String!
  tags: [String!]!
  teamName: String
  title: String
}

type StudentMini {
  id: ID!
  name: String!
}

type StudentSubmission {
  createdAt: ISO8601DateTime!
  evaluatedAt: ISO8601DateTime
  id: ID!
  levelId: ID!
  passedAt: ISO8601DateTime
  studentIds: [ID!]!
  targetId: ID!
  teamTarget: Boolean!
  title: String!
}

"""
The connection type for StudentSubmission.
"""
type StudentSubmissionConnection {
  """
  A list of edges.
  """
  edges: [StudentSubmissionEdge]

  """
  A list of nodes.
  """
  nodes: [StudentSubmission!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type StudentSubmissionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: StudentSubmission
}

type Submission {
  archivedAt: ISO8601DateTime
  checklist: JSON!
  createdAt: ISO8601DateTime!
  evaluatedAt: ISO8601DateTime
  evaluatorName: String
  feedback: [SubmissionFeedback!]!
  feedbackSent: Boolean!
  files: [SubmissionFile!]!
  grades: [Grade!]!
  id: ID!
  levelId: ID!
  levelNumber: Int!
  passedAt: ISO8601DateTime
  targetId: ID!
  teamName: String
  title: String!
  userNames: String!
}

type SubmissionDetails {
  allSubmissions: [SubmissionInfo!]!
  coaches: [UserProxy!]!
  courseId: ID!
  createdAt: ISO8601DateTime!
  evaluationCriteria: [EvaluationCriterion!]!
  inactiveStudents: Boolean!
  inactiveSubmissionReviewAllowedDays: Int!
  levelId: ID!
  levelNumber: String!
  preview: Boolean!
  reviewChecklist: [ReviewChecklist!]!
  reviewerDetails: ReviewerDetail
  students: [StudentMini!]!
  submission: Submission!
  submissionReportPollTime: Int!
  submissionReports: [SubmissionReport!]!
  targetEvaluationCriteriaIds: [ID!]!
  targetId: ID!
  targetTitle: String!
  teamName: String
}

type SubmissionFeedback {
  coachAvatarUrl: String
  coachName: String
  coachTitle: String!
  createdAt: ISO8601DateTime!
  id: ID!
  value: String!
}

type SubmissionFile {
  id: ID!
  title: String!
  url: String!
}

type SubmissionInfo {
  archivedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  evaluatedAt: ISO8601DateTime
  feedbackSent: Boolean!
  id: ID!
  levelNumber: Int!
  passedAt: ISO8601DateTime
  reviewer: ReviewerDetailInfo
  teamName: String
  title: String!
  userNames: String!
}

"""
The connection type for SubmissionInfo.
"""
type SubmissionInfoConnection {
  """
  A list of edges.
  """
  edges: [SubmissionInfoEdge]

  """
  A list of nodes.
  """
  nodes: [SubmissionInfo!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SubmissionInfoEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SubmissionInfo
}

type SubmissionReport {
  completedAt: ISO8601DateTime
  heading: String
  id: ID!
  queuedAt: ISO8601DateTime!
  report: String
  reporter: String!
  startedAt: ISO8601DateTime
  status: SubmissionReportStatus!
  targetUrl: String
}

enum SubmissionReportStatus {
  """
  Checks could not be completed successfully
  """
  error

  """
  One or more checks failed for the submission
  """
  failure

  """
  Checks in progress for the submission
  """
  in_progress

  """
  Checks are queued
  """
  queued

  """
  Checks successfully completed for the submission
  """
  success
}

enum SubmissionReviewStatus {
  """
  Submission that has already been reviewed by a coach with a pass grade
  """
  Completed

  """
  Submission that hasn't been reviewed by a coach yet
  """
  PendingReview

  """
  Submission that has already been reviewed by a coach without a pass grade
  """
  Rejected
}

enum SubmissionSortCriterion {
  """
  Sort list of submissions by evaluated date
  """
  EvaluatedAt

  """
  Sort list of submissions by submission date
  """
  SubmittedAt
}

enum SubmissionStatus {
  """
  Submission that hasn't been reviewed by a coach yet
  """
  Pending

  """
  Submission that has already been reviewed by a coach
  """
  Reviewed
}

type TargetDetails {
  checklist: JSON!
  completionInstructions: String
  evaluationCriteria: [ID!]!
  linkToComplete: String
  prerequisiteTargets: [ID!]!
  quiz: [TargetQuiz!]!
  role: String!
  targetGroupId: ID!
  title: String!
  visibility: String!
}

type TargetInfo {
  id: ID!
  title: String!
}

type TargetQuiz {
  answerOptions: [TargetQuizAnswer!]!
  id: ID!
  question: String!
}

type TargetQuizAnswer {
  answer: String!
  correctAnswer: Boolean!
  hint: String
  id: ID!
}

input TargetQuizAnswerInput {
  answer: String!
  correctAnswer: Boolean!
}

input TargetQuizInput {
  answerOptions: [TargetQuizAnswerInput!]!
  question: String!
}

type TargetVersion {
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
}

type Team {
  cohort: Cohort!
  id: ID!
  name: String!
  students: [Student!]!
}

"""
The connection type for Team.
"""
type TeamConnection {
  """
  A list of edges.
  """
  edges: [TeamEdge]

  """
  A list of nodes.
  """
  nodes: [Team!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type TeamEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Team
}

type Topic {
  createdAt: ISO8601DateTime!
  creator: User
  id: ID!
  lastActivityAt: ISO8601DateTime
  likesCount: Int!
  liveRepliesCount: Int!
  participants: [User!]!
  participantsCount: Int!
  solved: Boolean!
  title: String!
  topicCategoryId: ID
  views: Int!
}

"""
The connection type for Topic.
"""
type TopicConnection {
  """
  A list of edges.
  """
  edges: [TopicEdge]

  """
  A list of nodes.
  """
  nodes: [Topic!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type TopicEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Topic
}

enum TopicResolutionFilter {
  """
  To select topics that has a solution marked
  """
  Solved

  """
  To select topics without regard for resolution
  """
  Unselected

  """
  To select topics that do not have a solution marked
  """
  Unsolved
}

enum TopicSortCriterion {
  """
  Sort list of topics by creation time
  """
  CreatedAt

  """
  Sort list of topics by last activity time
  """
  LastActivityAt

  """
  Sort list of topics by number of views
  """
  Views
}

"""
Autogenerated return type of UnarchiveCourse.
"""
type UnarchiveCoursePayload {
  success: Boolean!
}

"""
Autogenerated return type of UnassignReviewer.
"""
type UnassignReviewerPayload {
  success: Boolean!
}

"""
Autogenerated return type of UndoGrading.
"""
type UndoGradingPayload {
  success: Boolean!
}

"""
Autogenerated return type of UndoSubmission.
"""
type UndoSubmissionPayload {
  success: Boolean!
}

"""
Autogenerated return type of UnlockTopic.
"""
type UnlockTopicPayload {
  success: Boolean!
}

"""
Autogenerated return type of UnmarkPostAsSolution.
"""
type UnmarkPostAsSolutionPayload {
  success: Boolean!
}

"""
Autogenerated return type of UpdateCertificate.
"""
type UpdateCertificatePayload {
  success: Boolean!
}

"""
Autogenerated return type of UpdateCohort.
"""
type UpdateCohortPayload {
  cohort: Cohort
}

enum UpdateCommunityErrors {
  """
  Community does not exist
  """
  IncorrectCommunityId

  """
  The list of courses selected are incorrect
  """
  IncorrectCourseIds

  """
  Supplied title must be between 1 and 50 characters in length
  """
  InvalidLengthName
}

"""
Autogenerated return type of UpdateCommunity.
"""
type UpdateCommunityPayload {
  communityId: ID
  errors: [UpdateCommunityErrors!]
}

"""
Autogenerated return type of UpdateCourseAuthor.
"""
type UpdateCourseAuthorPayload {
  success: Boolean!
}

"""
Autogenerated return type of UpdateCourse.
"""
type UpdateCoursePayload {
  course: Course
}

"""
Autogenerated return type of UpdateEvaluationCriterion.
"""
type UpdateEvaluationCriterionPayload {
  evaluationCriterion: EvaluationCriterion
}

"""
Autogenerated return type of UpdateFileContentBlock.
"""
type UpdateFileContentBlockPayload {
  contentBlock: ContentBlock
}

"""
Autogenerated return type of UpdateImageContentBlock.
"""
type UpdateImageContentBlockPayload {
  contentBlock: ContentBlock
}

"""
Autogenerated return type of UpdateMarkdownContentBlock.
"""
type UpdateMarkdownContentBlockPayload {
  contentBlock: ContentBlock
}

"""
Autogenerated return type of UpdatePost.
"""
type UpdatePostPayload {
  success: Boolean!
}

"""
Autogenerated return type of UpdateReviewChecklist.
"""
type UpdateReviewChecklistPayload {
  success: Boolean!
}

"""
Autogenerated return type of UpdateSchoolAdmin.
"""
type UpdateSchoolAdminPayload {
  success: Boolean!
}

"""
Autogenerated return type of UpdateSchoolLink.
"""
type UpdateSchoolLinkPayload {
  success: Boolean!
}

"""
Autogenerated return type of UpdateSchool.
"""
type UpdateSchoolPayload {
  success: Boolean!
}

enum UpdateSchoolStringError {
  """
  Supplied key must be one of coaches_index_subheading,
  library_index_subheading, email_address, address, privacy_policy,
  terms_and_conditions, description
  """
  InvalidKey

  """
  Supplied value is over the allowed length for supplied key
  """
  InvalidLengthValue

  """
  Supplied value could not be validated against the supplied key
  """
  InvalidValue
}

"""
Autogenerated return type of UpdateSchoolString.
"""
type UpdateSchoolStringPayload {
  errors: [UpdateSchoolStringError!]!
}

"""
Autogenerated return type of UpdateStudentDetails.
"""
type UpdateStudentDetailsPayload {
  success: Boolean!
}

"""
Autogenerated return type of UpdateTarget.
"""
type UpdateTargetPayload {
  sortIndex: Int
}

"""
Autogenerated return type of UpdateTeam.
"""
type UpdateTeamPayload {
  team: Team
}

"""
Autogenerated return type of UpdateTopicCategory.
"""
type UpdateTopicCategoryPayload {
  success: Boolean!
}

"""
Autogenerated return type of UpdateTopic.
"""
type UpdateTopicPayload {
  success: Boolean!
}

"""
Autogenerated return type of UpdateUser.
"""
type UpdateUserPayload {
  success: Boolean!
}

type User {
  affiliation: String
  avatarUrl: String
  email: String!
  fullTitle: String!
  id: ID!
  lastSeenAt: ISO8601DateTime
  name: String!
  preferredName: String
  taggings: [String!]!
  title: String!
}

type UserProxy {
  avatarUrl: String
  fullTitle: String!

  """
  The ID returned by the type can represent different user role types
  """
  id: ID!
  name: String!
  preferredName: String
  userId: ID!
}

type VimeoVideo {
  link: String!
  uploadLink: String!
}
