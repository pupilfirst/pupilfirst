"""
Requires that exactly one field must be supplied and that field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

type Applicant {
  email: String!
  id: ID!
  name: String!
  tags: [String!]!
}

"""The connection type for Applicant."""
type ApplicantConnection {
  """A list of edges."""
  edges: [ApplicantEdge]

  """A list of nodes."""
  nodes: [Applicant!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type ApplicantEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Applicant
}

enum ApplicantSortCriterion {
  """Sort list of applicants by creation time"""
  CreatedAt

  """Sort list of applicants by last activity time"""
  UpdatedAt

  """Sort list of applicants alphabetically"""
  Name
}

"""Autogenerated return type of ArchiveCoachNote."""
type ArchiveCoachNotePayload {
  success: Boolean!
}

"""Autogenerated return type of ArchiveCourse."""
type ArchiveCoursePayload {
  success: Boolean!
}

"""Autogenerated return type of ArchivePost."""
type ArchivePostPayload {
  success: Boolean!
}

"""Autogenerated return type of ArchiveSubmissionComment."""
type ArchiveSubmissionCommentPayload {
  success: Boolean!
}

"""Autogenerated return type of ArchiveUserStanding."""
type ArchiveUserStandingPayload {
  success: Boolean!
}

type AssignmentDetails {
  allowAnonymous: Boolean!
  archived: Boolean!
  checklist: JSON!
  completionInstructions: String
  discussion: Boolean!
  evaluationCriteria: [ID!]!
  milestone: Boolean!
  prerequisiteTargets: [ID!]!
  quiz: [AssignmentQuiz!]!
  role: String!
}

type AssignmentQuiz {
  answerOptions: [AssignmentQuizAnswer!]!
  id: ID!
  question: String!
}

type AssignmentQuizAnswer {
  answer: String!
  correctAnswer: Boolean!
  hint: String
  id: ID!
}

input AssignmentQuizAnswerInput {
  answer: String!
  correctAnswer: Boolean!
}

input AssignmentQuizInput {
  question: String!
  answerOptions: [AssignmentQuizAnswerInput!]!
}

"""Autogenerated return type of AssignReviewer."""
type AssignReviewerPayload {
  reviewer: UserProxy!
}

type AudioBlock {
  filename: String!
  title: String!
  url: String!
}

"""Autogenerated return type of BeginProcessingSubmissionReport."""
type BeginProcessingSubmissionReportPayload {
  success: Boolean!
}

type Certificate {
  active: Boolean!
  course: Course!
  createdAt: ISO8601DateTime!
  fontSize: Int!
  id: ID!
  margin: Int!
  name: String!
  nameOffsetTop: Int!
  qrCorner: String!
  qrScale: Int!
  updatedAt: ISO8601DateTime!
}

"""Autogenerated return type of CloneCourse."""
type CloneCoursePayload {
  success: Boolean!
}

"""Autogenerated return type of CloneLevel."""
type CloneLevelPayload {
  success: Boolean!
}

type Coach {
  cohorts(courseId: ID!): [Cohort!]!
  id: ID!
  students(courseId: ID!): [Student!]!
  user: User!
}

type CoachNote {
  author: User
  createdAt: ISO8601DateTime!
  id: ID!
  note: String!
}

type CoachStats {
  pendingSubmissions: Int!
  reviewedSubmissions: Int!
}

type Cohort {
  coachesCount: Int!
  course: Course!
  courseId: String!
  description: String
  endsAt: ISO8601DateTime
  id: ID!
  name: String!
  studentsCount: Int!
}

"""The connection type for Cohort."""
type CohortConnection {
  """A list of edges."""
  edges: [CohortEdge]

  """A list of nodes."""
  nodes: [Cohort!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type CohortEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Cohort
}

enum CommunitySearchByFilter {
  """To search for topics by title"""
  title

  """To search for topics by post body"""
  content
}

input CommunitySearchFilter {
  search: String!
  searchBy: CommunitySearchByFilter!
}

"""Autogenerated return type of ConcludeSubmissionReport."""
type ConcludeSubmissionReportPayload {
  success: Boolean!
}

union Content = AudioBlock | EmbedBlock | FileBlock | ImageBlock | MarkdownBlock

type ContentBlock {
  blockType: String!
  content: Content!
  id: ID!
  sortIndex: Int!
}

type Course {
  about: String
  archivedAt: ISO8601DateTime
  certificates: [Certificate!]!
  coaches: [UserProxy!]!
  coachesCount: Int!
  cohorts: [Cohort!]!
  cohortsCount: Int!
  cover: Image
  defaultCohort: Cohort
  description: String!
  enableLeaderboard: Boolean!
  featured: Boolean!
  highlights: [CourseHighlight!]!
  id: ID!
  levels: [Level!]!
  levelsCount: Int!
  name: String!
  processingUrl: String
  progressionLimit: Int!
  publicPreview: Boolean!
  publicSignup: Boolean!
  sortIndex: Int!
  studentTags: [String!]!
  thumbnail: Image
}

"""The connection type for Course."""
type CourseConnection {
  """A list of edges."""
  edges: [CourseEdge]

  """A list of nodes."""
  nodes: [Course!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type CourseEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Course
}

type CourseExport {
  cohorts: [Cohort!]!
  createdAt: ISO8601DateTime!
  exportType: Export!
  id: ID!
  includeInactiveStudents: Boolean!
  includeUserStandings: Boolean!
  reviewedOnly: Boolean!
  tags: [String!]!
}

type CourseHighlight {
  description: String!
  icon: String!
  title: String!
}

input CourseHighlightInput {
  icon: String!
  title: String!
  description: String!
}

enum CourseResource {
  """Cohorts in the course"""
  Cohort

  """Student tags in the course"""
  StudentTag

  """User tags in the course"""
  UserTag

  """Coaches in the course"""
  Coach
}

type CourseResourceInfo {
  resource: CourseResource!
  values: [String!]!
}

enum CourseStatus {
  """List of active courses"""
  Active

  """List of ended courses"""
  Ended

  """List of archived courses"""
  Archived
}

"""Autogenerated return type of CreateCoachNote."""
type CreateCoachNotePayload {
  coachNote: CoachNote
}

"""Autogenerated return type of CreateCohort."""
type CreateCohortPayload {
  cohort: Cohort
}

"""Autogenerated return type of CreateCommunity."""
type CreateCommunityPayload {
  id: String
}

"""Autogenerated return type of CreateCourseAuthor."""
type CreateCourseAuthorPayload {
  courseAuthor: UserProxy
}

"""Autogenerated return type of CreateCourseExport."""
type CreateCourseExportPayload {
  courseExport: CourseExport
}

"""Autogenerated return type of CreateCourse."""
type CreateCoursePayload {
  course: Course
}

"""Autogenerated return type of CreateEmbedContentBlock."""
type CreateEmbedContentBlockPayload {
  contentBlock: ContentBlock
}

"""Autogenerated return type of CreateEvaluationCriterion."""
type CreateEvaluationCriterionPayload {
  evaluationCriterion: EvaluationCriterion
}

"""Autogenerated return type of CreateFeedback."""
type CreateFeedbackPayload {
  success: Boolean!
}

"""Autogenerated return type of CreateGrading."""
type CreateGradingPayload {
  success: Boolean!
}

"""Autogenerated return type of CreateMarkdownContentBlock."""
type CreateMarkdownContentBlockPayload {
  contentBlock: ContentBlock
}

"""Autogenerated return type of CreateModerationReport."""
type CreateModerationReportPayload {
  moderationReport: ModerationReport!
}

"""Autogenerated return type of CreatePostLike."""
type CreatePostLikePayload {
  success: Boolean!
}

"""Autogenerated return type of CreatePost."""
type CreatePostPayload {
  postId: ID
}

"""Autogenerated return type of CreateQuizSubmission."""
type CreateQuizSubmissionPayload {
  submission: Submission
}

"""Autogenerated return type of CreateReaction."""
type CreateReactionPayload {
  reaction: Reaction!
}

"""Autogenerated return type of CreateSchoolAdmin."""
type CreateSchoolAdminPayload {
  schoolAdmin: UserProxy
}

"""Autogenerated return type of CreateSchoolLink."""
type CreateSchoolLinkPayload {
  schoolLink: SchoolLink
}

"""Autogenerated return type of CreateStudentFromApplicant."""
type CreateStudentFromApplicantPayload {
  success: Boolean!
}

"""Autogenerated return type of CreateStudents."""
type CreateStudentsPayload {
  studentIds: [ID!]
}

"""Autogenerated return type of CreateSubmissionComment."""
type CreateSubmissionCommentPayload {
  comment: SubmissionComment!
}

"""Autogenerated return type of CreateSubmission."""
type CreateSubmissionPayload {
  submission: Submission
}

type CreateTarget {
  contentBlockId: ID!
  id: ID!
  sampleContent: String!
}

"""Autogenerated return type of CreateTarget."""
type CreateTargetPayload {
  target: CreateTarget
}

"""Autogenerated return type of CreateTargetVersion."""
type CreateTargetVersionPayload {
  success: Boolean!
}

"""Autogenerated return type of CreateTeam."""
type CreateTeamPayload {
  team: Team
}

"""Autogenerated return type of CreateTopicCategory."""
type CreateTopicCategoryPayload {
  id: ID
}

"""Autogenerated return type of CreateTopic."""
type CreateTopicPayload {
  topicId: ID
}

"""Autogenerated return type of CreateTopicSubscription."""
type CreateTopicSubscriptionPayload {
  success: Boolean!
}

"""Autogenerated return type of CreateUserStanding."""
type CreateUserStandingPayload {
  userStanding: UserStanding
}

"""Autogenerated return type of CreateVimeoVideo."""
type CreateVimeoVideoPayload {
  vimeoVideo: VimeoVideo
}

"""Autogenerated return type of CreateWebPushSubscription."""
type CreateWebPushSubscriptionPayload {
  success: Boolean!
}

"""Autogenerated return type of DeleteAccount."""
type DeleteAccountPayload {
  success: Boolean!
}

"""Autogenerated return type of DeleteCertificate."""
type DeleteCertificatePayload {
  success: Boolean!
}

"""Autogenerated return type of DeleteCoachStudentEnrollment."""
type DeleteCoachStudentEnrollmentPayload {
  success: Boolean!
}

"""Autogenerated return type of DeleteContentBlock."""
type DeleteContentBlockPayload {
  success: Boolean!
}

"""Autogenerated return type of DeleteCourseAuthor."""
type DeleteCourseAuthorPayload {
  success: Boolean!
}

"""Autogenerated return type of DeletePostLike."""
type DeletePostLikePayload {
  success: Boolean!
}

"""Autogenerated return type of DeleteSchoolAdmin."""
type DeleteSchoolAdminPayload {
  success: Boolean!
}

"""Autogenerated return type of DeleteTopicCategory."""
type DeleteTopicCategoryPayload {
  success: Boolean!
}

"""Autogenerated return type of DeleteTopicSubscription."""
type DeleteTopicSubscriptionPayload {
  success: Boolean!
}

"""Autogenerated return type of DeleteWebPushSubscription."""
type DeleteWebPushSubscriptionPayload {
  success: Boolean!
}

"""Autogenerated return type of DestroySchoolLink."""
type DestroySchoolLinkPayload {
  success: Boolean!
}

"""Autogenerated return type of DestroyTeam."""
type DestroyTeamPayload {
  success: Boolean!
}

type DiscussionSubmission {
  anonymous: Boolean!
  checklist: JSON!
  comments: [SubmissionComment!]
  createdAt: ISO8601DateTime!
  files: [SubmissionFile!]!
  hiddenAt: ISO8601DateTime
  id: ID!
  moderationReports: [ModerationReport!]!
  pinned: Boolean!
  reactions: [Reaction!]
  targetId: ID!
  teamName: String
  userNames: String!
  users: [User!]!
}

"""The connection type for DiscussionSubmission."""
type DiscussionSubmissionConnection {
  """A list of edges."""
  edges: [DiscussionSubmissionEdge]

  """A list of nodes."""
  nodes: [DiscussionSubmission!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type DiscussionSubmissionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: DiscussionSubmission
}

"""Autogenerated return type of DropoutStudent."""
type DropoutStudentPayload {
  success: Boolean!
}

type EmbedBlock {
  embedCode: String
  lastResolvedAt: String
  requestSource: EmbedRequestSource!
  url: String!
}

enum EmbedRequestSource {
  """An embed whose source URL has been supplied by the user"""
  User

  """
  An embed whose source URL has been generated as a result of an upload to Vimeo
  """
  VimeoUpload
}

type EvaluationCriterion {
  gradeLabels: [GradeAndLabel!]!
  id: ID!
  maxGrade: Int!
  name: String!
}

type EvaluationCriterionAverage {
  averageGrade: Float!
  evaluationCriterionId: ID!
}

enum Export {
  """An export of student-related data"""
  Students

  """An export of team-related data"""
  Teams
}

type FileBlock {
  filename: String!
  title: String!
  url: String!
}

type Grade {
  evaluationCriterionId: ID!
  grade: Int!
}

type GradeAndLabel {
  grade: Int!
  label: String!
}

input GradeAndLabelInput {
  grade: Int!
  label: String!
}

input GradeInput {
  evaluationCriterionId: ID!
  grade: Int!
}

"""Autogenerated return type of HideSubmissionComment."""
type HideSubmissionCommentPayload {
  success: Boolean!
}

"""Autogenerated return type of HideSubmission."""
type HideSubmissionPayload {
  success: Boolean!
}

type Image {
  filename: String!
  url: String!
}

type ImageBlock {
  caption: String!
  filename: String!
  url: String!
  width: ImageWidth!
}

enum ImageWidth {
  Auto
  Full
  FourFifths
  ThreeFifths
  TwoFifths
}

"""Autogenerated return type of InitiateAccountDeletion."""
type InitiateAccountDeletionPayload {
  success: Boolean!
}

"""Autogenerated return type of InitiatePasswordReset."""
type InitiatePasswordResetPayload {
  success: Boolean!
}

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

"""Autogenerated return type of IssueCertificate."""
type IssueCertificatePayload {
  issuedCertificate: IssuedCertificate
}

type IssuedCertificate {
  certificate: Certificate!
  createdAt: ISO8601DateTime!
  id: ID!
  issuedBy: String!
  name: String!
  revokedAt: ISO8601DateTime
  revokedBy: String
  serialNumber: String!
  updatedAt: ISO8601DateTime!
  user: User!
}

"""Represents untyped JSON"""
scalar JSON

type Level {
  id: ID!
  name: String!
  number: Int!
}

"""Autogenerated return type of LockTopic."""
type LockTopicPayload {
  success: Boolean!
}

"""Autogenerated return type of MarkAllNotifications."""
type MarkAllNotificationsPayload {
  success: Boolean!
}

type MarkdownBlock {
  markdown: String!
}

"""Autogenerated return type of MarkNotification."""
type MarkNotificationPayload {
  success: Boolean!
}

"""Autogenerated return type of MarkPostAsSolution."""
type MarkPostAsSolutionPayload {
  success: Boolean!
}

"""Autogenerated return type of MergeCohort."""
type MergeCohortPayload {
  success: Boolean!
}

"""Autogenerated return type of MergeLevels."""
type MergeLevelsPayload {
  success: Boolean!
}

type MilestonesCompletionStatus {
  completed: Boolean!
  id: ID!
  milestoneNumber: Int!
  title: String!
}

type ModerationReport {
  id: ID!
  reason: String!
  reportableId: ID
  reportableType: String!
  userId: ID!
}

"""Autogenerated return type of MoveContentBlock."""
type MoveContentBlockPayload {
  success: Boolean!
}

"""Autogenerated return type of MoveCourse."""
type MoveCoursePayload {
  success: Boolean!
}

enum MoveDirection {
  """Move something up"""
  Up

  """Move something down"""
  Down
}

"""Autogenerated return type of MoveSchoolLink."""
type MoveSchoolLinkPayload {
  success: Boolean!
}

type Mutation {
  """Archives a coach note for student"""
  archiveCoachNote(id: ID!): ArchiveCoachNotePayload!

  """Archives a course."""
  archiveCourse(id: ID!): ArchiveCoursePayload!

  """Archive a community post"""
  archivePost(id: ID!): ArchivePostPayload!

  """Archive a submission comment"""
  archiveSubmissionComment(submissionCommentId: String!): ArchiveSubmissionCommentPayload!

  """Archive a standing log"""
  archiveUserStanding(id: ID!): ArchiveUserStandingPayload!

  """Assign reviewer for a submission"""
  assignReviewer(submissionId: ID!): AssignReviewerPayload!

  """Create in progress report for a submission"""
  beginProcessingSubmissionReport(submissionId: ID!, report: String, reporter: String!, heading: String, targetUrl: String): BeginProcessingSubmissionReportPayload!

  """Make a clone of a given course."""
  cloneCourse(id: ID!): CloneCoursePayload!

  """Clone level into given course"""
  cloneLevel(levelId: ID!, cloneIntoCourseId: ID!): CloneLevelPayload!

  """Create completed report for a submission"""
  concludeSubmissionReport(submissionId: ID!, report: String, status: SubmissionReportStatus!, reporter: String!, heading: String, targetUrl: String): ConcludeSubmissionReportPayload!

  """Create a coach note."""
  createCoachNote(note: String!, studentId: ID!): CreateCoachNotePayload!

  """Create a new cohort"""
  createCohort(courseId: ID, name: String!, description: String, endsAt: ISO8601DateTime): CreateCohortPayload!

  """Create a new community"""
  createCommunity(name: String!, targetLinkable: Boolean!, courseIds: [ID!]): CreateCommunityPayload!

  """Create a new course."""
  createCourse(name: String!, description: String!, about: String, progressionLimit: Int!, highlights: [CourseHighlightInput!], publicSignup: Boolean!, publicPreview: Boolean!, featured: Boolean!, processingUrl: String): CreateCoursePayload!

  """Create a new author in a course"""
  createCourseAuthor(courseId: ID!, name: String!, email: String!): CreateCourseAuthorPayload!

  """Request a course export."""
  createCourseExport(courseId: ID!, exportType: Export!, tagIds: [ID!]!, reviewedOnly: Boolean!, includeInactiveStudents: Boolean!, cohortIds: [ID!]!, includeUserStandings: Boolean!): CreateCourseExportPayload!

  """Creates an embed content block."""
  createEmbedContentBlock(targetId: ID!, aboveContentBlockId: ID, url: String!, requestSource: EmbedRequestSource!): CreateEmbedContentBlockPayload!

  """Create a new evaluation criterion."""
  createEvaluationCriterion(name: String!, maxGrade: Int!, gradesAndLabels: [GradeAndLabelInput!]!, courseId: ID!): CreateEvaluationCriterionPayload!

  """Create feedback for submission"""
  createFeedback(submissionId: ID!, feedback: String!): CreateFeedbackPayload!

  """Create grading for submission"""
  createGrading(submissionId: ID!, grades: [GradeInput!], feedback: String, checklist: JSON!, note: String): CreateGradingPayload!

  """Creates a markdown content block."""
  createMarkdownContentBlock(targetId: ID!, aboveContentBlockId: ID): CreateMarkdownContentBlockPayload!

  """Create a moderation report on either a submission or comment"""
  createModerationReport(reason: String!, reportableId: String!, reportableType: String!): CreateModerationReportPayload!

  """Create a new post in a topic"""
  createPost(body: String!, topicId: ID!, replyToPostId: ID): CreatePostPayload!

  """Add a like for the post"""
  createPostLike(postId: ID!): CreatePostLikePayload!

  """Create quiz submission"""
  createQuizSubmission(targetId: ID!, answerIds: [ID!]): CreateQuizSubmissionPayload!

  """Create a reaction on either a submission or comment"""
  createReaction(reactionValue: String!, reactionableId: String!, reactionableType: String!): CreateReactionPayload!

  """Create a new school admin"""
  createSchoolAdmin(name: String!, email: String!): CreateSchoolAdminPayload!

  """Create a school link."""
  createSchoolLink(kind: String!, title: String, url: String!): CreateSchoolLinkPayload!

  """Create student from applicant record"""
  createStudentFromApplicant(applicantId: ID!, title: String, affiliation: String, tags: [String!]!, notifyStudent: Boolean): CreateStudentFromApplicantPayload!

  """Add one or more students to a course"""
  createStudents(cohortId: ID!, students: [StudentEnrollmentInput!]!, notifyStudents: Boolean!): CreateStudentsPayload!

  """Create a new submission for a target"""
  createSubmission(targetId: ID!, checklist: JSON!, fileIds: [ID!]!, anonymous: Boolean!): CreateSubmissionPayload!

  """Create a submission comment"""
  createSubmissionComment(comment: String!, submissionId: String!): CreateSubmissionCommentPayload!

  """Create a new target."""
  createTarget(title: String!, targetGroupId: String!): CreateTargetPayload!

  """Update a target"""
  createTargetVersion(targetVersionId: ID!): CreateTargetVersionPayload!

  """Create a new team"""
  createTeam(cohortId: ID, name: String!, studentIds: [ID!]!): CreateTeamPayload!

  """Create a new topic of discussion in a community"""
  createTopic(title: String!, body: String!, communityId: ID!, targetId: ID, topicCategoryId: ID): CreateTopicPayload!

  """Create a category in community."""
  createTopicCategory(name: String!, communityId: ID!): CreateTopicCategoryPayload!

  """Create a topic subscription."""
  createTopicSubscription(topicId: ID!): CreateTopicSubscriptionPayload!

  """Create a new standing log"""
  createUserStanding(userId: ID!, reason: String!, standingId: ID!): CreateUserStandingPayload!

  """Create Vimeo upload URI"""
  createVimeoVideo(targetId: ID!, size: Int!, title: String, description: String): CreateVimeoVideoPayload!

  """Create web push subscription"""
  createWebPushSubscription(endpoint: String!, p256dh: String!, auth: String!): CreateWebPushSubscriptionPayload!

  """Delete user account permanently"""
  deleteAccount(token: String!): DeleteAccountPayload!

  """Delete an un-issued certificate"""
  deleteCertificate(id: ID!): DeleteCertificatePayload!

  """Deletes an assigned student for a coach"""
  deleteCoachStudentEnrollment(coachId: ID!, studentId: ID!): DeleteCoachStudentEnrollmentPayload!

  """Deletes a target content block."""
  deleteContentBlock(id: ID!): DeleteContentBlockPayload!

  """Delete a course author"""
  deleteCourseAuthor(id: ID!): DeleteCourseAuthorPayload!

  """Delete a like for some post"""
  deletePostLike(postId: ID!): DeletePostLikePayload!

  """Delete a school admin"""
  deleteSchoolAdmin(id: ID!): DeleteSchoolAdminPayload!

  """Destroy a category in community."""
  deleteTopicCategory(id: ID!): DeleteTopicCategoryPayload!

  """Unsubscribe from a topic"""
  deleteTopicSubscription(topicId: ID!): DeleteTopicSubscriptionPayload!

  """Delete web push subscription"""
  deleteWebPushSubscription: DeleteWebPushSubscriptionPayload!

  """Destroy a school link."""
  destroySchoolLink(id: ID!): DestroySchoolLinkPayload!

  """Destroy team"""
  destroyTeam(teamId: ID): DestroyTeamPayload!

  """Mark student as exited"""
  dropoutStudent(id: ID!): DropoutStudentPayload!

  """Hide or unhide a submission from discussion"""
  hideSubmission(submissionId: String!, hide: Boolean!): HideSubmissionPayload!

  """Hide or unhide a submission comment from discussion"""
  hideSubmissionComment(submissionCommentId: String!, hide: Boolean!): HideSubmissionCommentPayload!

  """Delete user account"""
  initiateAccountDeletion(email: String!): InitiateAccountDeletionPayload!

  """Initiates the password reset process for a user."""
  initiatePasswordReset(email: String!): InitiatePasswordResetPayload!

  """Issue a certificate to a student"""
  issueCertificate(studentId: ID!, certificateId: ID!): IssueCertificatePayload!

  """Lock a topic in community."""
  lockTopic(id: ID!): LockTopicPayload!

  """Mark all notifications as read"""
  markAllNotifications: MarkAllNotificationsPayload!

  """Mark a notification as having been read"""
  markNotification(notificationId: ID!): MarkNotificationPayload!

  """Mark a community post as a solution"""
  markPostAsSolution(id: ID!): MarkPostAsSolutionPayload!

  """Merge cohorts"""
  mergeCohort(deleteCohortId: ID!, mergeIntoCohortId: ID!): MergeCohortPayload!

  """Merge one level into another"""
  mergeLevels(deleteLevelId: ID!, mergeIntoLevelId: ID!): MergeLevelsPayload!

  """Move a content block in a target up or down"""
  moveContentBlock(id: ID!, direction: MoveDirection!): MoveContentBlockPayload!

  """Rearrange courses order"""
  moveCourse(id: ID!, targetPositionCourseId: ID!): MoveCoursePayload!

  """Rearrange school links"""
  moveSchoolLink(id: ID!, direction: MoveDirection!): MoveSchoolLinkPayload!

  """Pin or unpin a submission"""
  pinSubmission(pin: Boolean!, submissionId: String!): PinSubmissionPayload!

  """Create queued report for a submission"""
  queueSubmissionReport(submissionId: ID!, report: String, reporter: String!, heading: String, targetUrl: String): QueueSubmissionReportPayload!

  """Re-activate student in a course"""
  reActivateStudent(id: ID!): ReActivateStudentPayload!

  """Re-run the Github Action for a submission"""
  reRunGithubAction(submissionId: ID): ReRunGithubActionPayload!

  """Reassign reviewer for a submission"""
  reassignReviewer(submissionId: ID!): ReassignReviewerPayload!

  """Remove a reaction from either a submission or comment"""
  removeReaction(reactionId: String!): RemoveReactionPayload!

  """Resolve embed code for a given content block"""
  resolveEmbedCode(contentBlockId: ID!): ResolveEmbedCodePayload!

  """Revoke an issued certificate"""
  revokeIssuedCertificate(issuedCertificateId: ID!): RevokeIssuedCertificatePayload!

  """Update email for current user"""
  sendUpdateEmailToken(newEmail: String!, password: String!): SendUpdateEmailTokenPayload!

  """Sort targets and target groups"""
  sortCurriculumResources(resourceIds: [ID!]!, resourceType: String!): SortCurriculumResourcesPayload!

  """Un-archives a course."""
  unarchiveCourse(id: ID!): UnarchiveCoursePayload!

  """Unassign reviewer for a submission"""
  unassignReviewer(submissionId: ID!): UnassignReviewerPayload!

  """Delete grading for the submission."""
  undoGrading(submissionId: ID!): UndoGradingPayload!

  """Delete the last submission for a target"""
  undoSubmission(targetId: ID!): UndoSubmissionPayload!

  """Unlock a topic in community."""
  unlockTopic(id: ID!): UnlockTopicPayload!

  """Unmark a community post as a solution"""
  unmarkPostAsSolution(id: ID!): UnmarkPostAsSolutionPayload!

  """Update an assignment"""
  updateAssignment(targetId: ID!, role: String!, evaluationCriteria: [ID!]!, prerequisiteTargets: [ID!]!, quiz: [AssignmentQuizInput!]!, completionInstructions: String, checklist: JSON!, milestone: Boolean!, archived: Boolean, discussion: Boolean!, allowAnonymous: Boolean): UpdateAssignmentPayload!

  """Update a certificate"""
  updateCertificate(id: ID!, margin: Int!, nameOffsetTop: Int!, fontSize: Int!, qrCorner: QrCorner!, qrScale: Int!, active: Boolean!, name: String!): UpdateCertificatePayload!

  """Update a cohort"""
  updateCohort(cohortId: ID, name: String!, description: String, endsAt: ISO8601DateTime): UpdateCohortPayload!

  """Update a new community"""
  updateCommunity(id: ID!, name: String!, targetLinkable: Boolean!, courseIds: [ID!]): UpdateCommunityPayload!

  """Update a course."""
  updateCourse(name: String!, description: String!, about: String, progressionLimit: Int!, highlights: [CourseHighlightInput!], publicSignup: Boolean!, publicPreview: Boolean!, featured: Boolean!, processingUrl: String, id: ID!, defaultCohortId: ID!): UpdateCoursePayload!

  """Update a course author"""
  updateCourseAuthor(id: ID!, name: String!): UpdateCourseAuthorPayload!

  """Update an evaluation criterion."""
  updateEvaluationCriterion(id: ID!, name: String!, gradesAndLabels: [GradeAndLabelInput!]!): UpdateEvaluationCriterionPayload!

  """Updates the title of a file block."""
  updateFileBlock(id: ID!, title: String): UpdateFileContentBlockPayload!

  """Updates the caption and the width of an image block."""
  updateImageBlock(id: ID!, caption: String, width: ImageWidth!): UpdateImageContentBlockPayload!

  """Updates the markdown content of a markdown block."""
  updateMarkdownBlock(id: ID!, markdown: String): UpdateMarkdownContentBlockPayload!

  """Update community post"""
  updatePost(id: ID!, body: String!, editReason: String): UpdatePostPayload!

  """Update review checklist"""
  updateReviewChecklist(targetId: ID!, reviewChecklist: JSON!): UpdateReviewChecklistPayload!

  """Update a School details"""
  updateSchool(name: String!, about: String!): UpdateSchoolPayload!

  """Update school admin"""
  updateSchoolAdmin(id: ID!, name: String!): UpdateSchoolAdminPayload!

  """Update school header/footer/social links"""
  updateSchoolLink(id: ID!, title: String, url: String): UpdateSchoolLinkPayload!

  """Update a school string."""
  updateSchoolString(key: String!, value: String): UpdateSchoolStringPayload!

  """Update details of a student"""
  updateStudentDetails(id: ID!, cohortId: ID!, coachIds: [ID!]!, name: String!, title: String!, affiliation: String, taggings: [String!]!): UpdateStudentDetailsPayload!

  """Update a target"""
  updateTarget(id: ID!, title: String!, targetGroupId: ID!, visibility: String!): UpdateTargetPayload!

  """Update a new team"""
  updateTeam(teamId: ID, name: String!, studentIds: [ID!]!): UpdateTeamPayload!

  """Update a topic"""
  updateTopic(id: ID!, title: String!, topicCategoryId: ID): UpdateTopicPayload!

  """Update a category in community."""
  updateTopicCategory(name: String!, id: ID!): UpdateTopicCategoryPayload!

  """Update profile of a user"""
  updateUser(name: String!, preferredName: String, about: String, locale: String!, currentPassword: String, newPassword: String, confirmNewPassword: String, dailyDigest: Boolean!): UpdateUserPayload!
}

type Notification {
  actor: User
  createdAt: ISO8601DateTime!
  event: NotificationEvent!
  id: ID!
  message: String!
  notifiableId: ID
  notifiableType: ID
  readAt: ISO8601DateTime
}

"""The connection type for Notification."""
type NotificationConnection {
  """A list of edges."""
  edges: [NotificationEdge]

  """A list of nodes."""
  nodes: [Notification!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type NotificationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Notification
}

enum NotificationEvent {
  """Notification triggered when topic is created"""
  TopicCreated

  """Notification triggered when post is created"""
  PostCreated

  """Notification triggered when submission_comment is created"""
  SubmissionCommentCreated

  """Notification triggered when reaction is created"""
  ReactionCreated
}

enum NotificationStatus {
  """Notification that has been read"""
  Read

  """Notification that is unread"""
  Unread
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""Autogenerated return type of PinSubmission."""
type PinSubmissionPayload {
  success: Boolean!
}

enum QrCorner {
  """QR Code not shown"""
  Hidden

  """QR Code shown at the top-left"""
  TopLeft

  """QR Code shown at the top-right"""
  TopRight

  """QR Code shown at the bottom-left"""
  BottomLeft

  """QR Code shown at the bottom-right"""
  BottomRight
}

type Query {
  applicant(applicantId: ID!): Applicant!
  applicants(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    courseId: ID!
    search: String
    tags: [String!]
    sortCriterion: ApplicantSortCriterion!
    sortDirection: SortDirection!
  ): ApplicantConnection!
  assignmentDetails(targetId: ID!): AssignmentDetails
  coach(id: ID!): Coach!
  coachNotes(studentId: ID!): [CoachNote!]!
  coachStats(coachId: ID!, courseId: ID!): CoachStats!
  coaches(courseId: ID!, coachIds: [ID!]): [UserProxy!]!
  cohort(id: ID!): Cohort!
  cohorts(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    courseId: ID!
    filterString: String
  ): CohortConnection!
  contentBlocks(targetId: ID!, targetVersionId: ID): [ContentBlock!]!
  course(id: ID!): Course!
  courseResourceInfo(courseId: ID!, resources: [CourseResource!]!): [CourseResourceInfo!]!
  courseStudents(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    courseId: ID!
    filterString: String
  ): StudentConnection!
  courses(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    search: String
    status: CourseStatus
    id: ID
  ): CourseConnection!
  discussionSubmissions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    targetId: ID!
  ): DiscussionSubmissionConnection!
  evaluationCriteria(courseId: ID!): [EvaluationCriterion!]!
  hasArchivedCoachNotes(studentId: ID!): Boolean!
  isSchoolStandingEnabled: Boolean!
  level(courseId: ID!, levelId: ID): Level
  levels(courseId: ID!): [Level!]!
  notifications(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    search: String
    status: NotificationStatus
    event: NotificationEvent
  ): NotificationConnection!
  reviewedTargetsInfo(courseId: ID!): [TargetInfo!]!
  schoolStats: SchoolStats!
  similarTopics(communityId: ID!, title: String!): [Topic!]!
  standings: [Standing!]!
  student(studentId: ID!): Student!
  studentDetails(studentId: ID!): StudentDetails!
  studentSubmissions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    studentId: ID!
    status: SubmissionReviewStatus
    sortDirection: SortDirection!
  ): StudentSubmissionConnection!
  submissionDetails(submissionId: ID!): SubmissionDetails!
  submissionReport(id: ID!): SubmissionReport!
  submissions(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    courseId: ID!
    status: SubmissionStatus
    sortDirection: SortDirection!
    sortCriterion: SubmissionSortCriterion!
    personalCoachId: ID
    assignedCoachId: ID
    reviewingCoachId: ID
    targetId: ID
    search: String
    includeInactive: Boolean
  ): SubmissionInfoConnection!
  targetDetails(targetId: ID!): TargetDetails!
  targetInfo(courseId: ID!, targetId: ID): TargetInfo
  targetVersions(targetId: ID!): [TargetVersion!]!
  team(id: ID!): Team!
  teams(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    courseId: ID!
    filterString: String
  ): TeamConnection!
  topics(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    communityId: ID!
    resolution: TopicResolutionFilter!
    topicCategoryId: ID
    targetId: ID
    search: CommunitySearchFilter
    sortDirection: SortDirection!
    sortCriterion: TopicSortCriterion!
  ): TopicConnection!
  userStandings(userId: ID!): [UserStanding!]!
}

"""Autogenerated return type of QueueSubmissionReport."""
type QueueSubmissionReportPayload {
  success: Boolean!
}

type Reaction {
  id: ID!
  reactionValue: String!
  reactionableId: ID
  reactionableType: String!
  updatedAt: ISO8601DateTime!
  userId: ID!
  userName: String!
}

"""Autogenerated return type of ReActivateStudent."""
type ReActivateStudentPayload {
  success: Boolean!
}

"""Autogenerated return type of ReassignReviewer."""
type ReassignReviewerPayload {
  reviewer: UserProxy!
}

"""Autogenerated return type of RemoveReaction."""
type RemoveReactionPayload {
  success: Boolean!
}

"""Autogenerated return type of ReRunGithubAction."""
type ReRunGithubActionPayload {
  success: Boolean!
}

"""Autogenerated return type of ResolveEmbedCode."""
type ResolveEmbedCodePayload {
  embedCode: String
}

type ReviewChecklist {
  result: [ReviewChecklistResult!]!
  title: String!
}

type ReviewChecklistResult {
  feedback: String
  title: String!
}

type ReviewerDetail {
  assignedAt: ISO8601DateTime!
  user: UserProxy!
}

type ReviewerDetailInfo {
  assignedAt: ISO8601DateTime!
  name: String!
}

"""Autogenerated return type of RevokeIssuedCertificate."""
type RevokeIssuedCertificatePayload {
  revokedCertificate: IssuedCertificate
}

type SchoolLink {
  id: ID!
  kind: String!
  sortIndex: Int!
  title: String
  url: String!
}

type SchoolStats {
  coachesCount: Int!
  studentsCount: Int!
}

"""Autogenerated return type of SendUpdateEmailToken."""
type SendUpdateEmailTokenPayload {
  success: Boolean!
}

"""Autogenerated return type of SortCurriculumResources."""
type SortCurriculumResourcesPayload {
  success: Boolean!
}

enum SortDirection {
  """Sort list in ascending order"""
  Ascending

  """Sort list in descending order"""
  Descending
}

type Standing {
  color: String!
  description: String
  id: ID!
  name: String!
}

type Student {
  cohort: Cohort!
  course: Course!
  droppedOutAt: ISO8601DateTime
  githubRepository: String
  id: ID!
  issuedCertificates: [IssuedCertificate!]!
  personalCoaches: [UserProxy!]!
  taggings: [String!]!
  user: User!
}

"""The connection type for Student."""
type StudentConnection {
  """A list of edges."""
  edges: [StudentEdge]

  """A list of nodes."""
  nodes: [Student!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

type StudentDetails {
  assignmentsCompleted: Int!
  assignmentsPendingReview: Int!
  averageGrades: [EvaluationCriterionAverage!]!
  canModifyCoachNotes: Boolean!
  email: String!
  evaluationCriteria: [EvaluationCriterion!]!
  milestonesCompletionStatus: [MilestonesCompletionStatus!]!
  quizScores: [String!]!
  student: Student!
  team: Team
  totalAssignments: Int!
  totalPageReads: Int!
  totalTargets: Int!
}

"""An edge in a connection."""
type StudentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Student
}

input StudentEnrollmentInput {
  name: String!
  email: String!
  title: String
  affiliation: String
  teamName: String
  tags: [String!]!
}

type StudentMini {
  id: ID!
  name: String!
}

type StudentSubmission {
  createdAt: ISO8601DateTime!
  evaluatedAt: ISO8601DateTime
  id: ID!
  milestoneNumber: Int
  passedAt: ISO8601DateTime
  studentIds: [ID!]!
  targetId: ID!
  teamTarget: Boolean!
  title: String!
}

"""The connection type for StudentSubmission."""
type StudentSubmissionConnection {
  """A list of edges."""
  edges: [StudentSubmissionEdge]

  """A list of nodes."""
  nodes: [StudentSubmission!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type StudentSubmissionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: StudentSubmission
}

type Submission {
  anonymous: Boolean!
  archivedAt: ISO8601DateTime
  checklist: JSON!
  createdAt: ISO8601DateTime!
  evaluatedAt: ISO8601DateTime
  evaluatorName: String
  feedback: [SubmissionFeedback!]!
  feedbackSent: Boolean!
  files: [SubmissionFile!]!
  grades: [Grade!]!
  id: ID!
  levelId: ID!
  levelNumber: Int!
  passedAt: ISO8601DateTime
  targetId: ID!
  teamName: String
  title: String!
  userNames: String!
}

type SubmissionComment {
  comment: String!
  createdAt: ISO8601DateTime!
  hiddenAt: ISO8601DateTime
  hiddenById: ID
  id: ID!
  moderationReports: [ModerationReport!]!
  reactions: [Reaction!]!
  submissionId: ID!
  user: User!
  userId: ID!
}

type SubmissionDetails {
  allSubmissions: [SubmissionInfo!]!
  coaches: [UserProxy!]!
  courseId: ID!
  createdAt: ISO8601DateTime!
  evaluationCriteria: [EvaluationCriterion!]!
  reviewChecklist: [ReviewChecklist!]!
  reviewable: Boolean!
  reviewerDetails: ReviewerDetail
  students: [StudentMini!]!
  submission: Submission!
  submissionReportPollTime: Int!
  submissionReports: [SubmissionReport!]!
  targetEvaluationCriteriaIds: [ID!]!
  targetId: ID!
  targetTitle: String!
  teamName: String
  warning: String
}

type SubmissionFeedback {
  coachAvatarUrl: String
  coachName: String
  coachTitle: String!
  createdAt: ISO8601DateTime!
  id: ID!
  value: String!
}

type SubmissionFile {
  id: ID!
  name: String!
  title: String!
  url: String!
}

type SubmissionInfo {
  archivedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  evaluatedAt: ISO8601DateTime
  feedbackSent: Boolean!
  id: ID!
  milestoneNumber: Int
  passedAt: ISO8601DateTime
  reviewer: ReviewerDetailInfo
  teamName: String
  title: String!
  userNames: String!
}

"""The connection type for SubmissionInfo."""
type SubmissionInfoConnection {
  """A list of edges."""
  edges: [SubmissionInfoEdge]

  """A list of nodes."""
  nodes: [SubmissionInfo!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type SubmissionInfoEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: SubmissionInfo
}

type SubmissionReport {
  completedAt: ISO8601DateTime
  heading: String
  id: ID!
  queuedAt: ISO8601DateTime!
  report: String
  reporter: String!
  startedAt: ISO8601DateTime
  status: SubmissionReportStatus!
  targetUrl: String
}

enum SubmissionReportStatus {
  """Checks are queued"""
  queued

  """Checks in progress for the submission"""
  in_progress

  """Checks could not be completed successfully"""
  error

  """One or more checks failed for the submission"""
  failure

  """Checks successfully completed for the submission"""
  success
}

enum SubmissionReviewStatus {
  """Submission that hasn't been reviewed by a coach yet"""
  PendingReview

  """Submission that has already been reviewed by a coach with a pass grade"""
  Completed

  """
  Submission that has already been reviewed by a coach without a pass grade
  """
  Rejected
}

enum SubmissionSortCriterion {
  """Sort list of submissions by submission date"""
  SubmittedAt

  """Sort list of submissions by evaluated date"""
  EvaluatedAt
}

enum SubmissionStatus {
  """Submission that hasn't been reviewed by a coach yet"""
  Pending

  """Submission that has already been reviewed by a coach"""
  Reviewed
}

type TargetDetails {
  targetGroupId: ID!
  title: String!
  visibility: String!
}

type TargetInfo {
  id: ID!
  milestoneNumber: Int
  title: String!
}

type TargetVersion {
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
}

type Team {
  cohort: Cohort!
  id: ID!
  name: String!
  students: [Student!]!
}

"""The connection type for Team."""
type TeamConnection {
  """A list of edges."""
  edges: [TeamEdge]

  """A list of nodes."""
  nodes: [Team!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type TeamEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Team
}

type Topic {
  createdAt: ISO8601DateTime!
  creator: User
  id: ID!
  lastActivityAt: ISO8601DateTime
  likesCount: Int!
  liveRepliesCount: Int!
  participants: [User!]!
  participantsCount: Int!
  solved: Boolean!
  title: String!
  topicCategoryId: ID
  views: Int!
}

"""The connection type for Topic."""
type TopicConnection {
  """A list of edges."""
  edges: [TopicEdge]

  """A list of nodes."""
  nodes: [Topic!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}

"""An edge in a connection."""
type TopicEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Topic
}

enum TopicResolutionFilter {
  """To select topics that has a solution marked"""
  Solved

  """To select topics that do not have a solution marked"""
  Unsolved

  """To select topics without regard for resolution"""
  Unselected
}

enum TopicSortCriterion {
  """Sort list of topics by creation time"""
  CreatedAt

  """Sort list of topics by last activity time"""
  LastActivityAt

  """Sort list of topics by number of views"""
  Views
}

"""Autogenerated return type of UnarchiveCourse."""
type UnarchiveCoursePayload {
  success: Boolean!
}

"""Autogenerated return type of UnassignReviewer."""
type UnassignReviewerPayload {
  success: Boolean!
}

"""Autogenerated return type of UndoGrading."""
type UndoGradingPayload {
  success: Boolean!
}

"""Autogenerated return type of UndoSubmission."""
type UndoSubmissionPayload {
  success: Boolean!
}

"""Autogenerated return type of UnlockTopic."""
type UnlockTopicPayload {
  success: Boolean!
}

"""Autogenerated return type of UnmarkPostAsSolution."""
type UnmarkPostAsSolutionPayload {
  success: Boolean!
}

"""Autogenerated return type of UpdateAssignment."""
type UpdateAssignmentPayload {
  id: ID
}

"""Autogenerated return type of UpdateCertificate."""
type UpdateCertificatePayload {
  success: Boolean!
}

"""Autogenerated return type of UpdateCohort."""
type UpdateCohortPayload {
  cohort: Cohort!
}

enum UpdateCommunityErrors {
  """Supplied title must be between 1 and 50 characters in length"""
  InvalidLengthName

  """The list of courses selected are incorrect"""
  IncorrectCourseIds

  """Community does not exist"""
  IncorrectCommunityId
}

"""Autogenerated return type of UpdateCommunity."""
type UpdateCommunityPayload {
  communityId: ID
  errors: [UpdateCommunityErrors!]
}

"""Autogenerated return type of UpdateCourseAuthor."""
type UpdateCourseAuthorPayload {
  success: Boolean!
}

"""Autogenerated return type of UpdateCourse."""
type UpdateCoursePayload {
  course: Course
}

"""Autogenerated return type of UpdateEvaluationCriterion."""
type UpdateEvaluationCriterionPayload {
  evaluationCriterion: EvaluationCriterion
}

"""Autogenerated return type of UpdateFileContentBlock."""
type UpdateFileContentBlockPayload {
  contentBlock: ContentBlock
}

"""Autogenerated return type of UpdateImageContentBlock."""
type UpdateImageContentBlockPayload {
  contentBlock: ContentBlock
}

"""Autogenerated return type of UpdateMarkdownContentBlock."""
type UpdateMarkdownContentBlockPayload {
  contentBlock: ContentBlock
}

"""Autogenerated return type of UpdatePost."""
type UpdatePostPayload {
  success: Boolean!
}

"""Autogenerated return type of UpdateReviewChecklist."""
type UpdateReviewChecklistPayload {
  success: Boolean!
}

"""Autogenerated return type of UpdateSchoolAdmin."""
type UpdateSchoolAdminPayload {
  success: Boolean!
}

"""Autogenerated return type of UpdateSchoolLink."""
type UpdateSchoolLinkPayload {
  success: Boolean!
}

"""Autogenerated return type of UpdateSchool."""
type UpdateSchoolPayload {
  success: Boolean!
}

enum UpdateSchoolStringError {
  """
  Supplied key must be one of coaches_index_subheading,
  library_index_subheading, email_address, address, privacy_policy,
  terms_and_conditions, description, code_of_conduct
  """
  InvalidKey

  """Supplied value could not be validated against the supplied key"""
  InvalidValue

  """Supplied value is over the allowed length for supplied key"""
  InvalidLengthValue
}

"""Autogenerated return type of UpdateSchoolString."""
type UpdateSchoolStringPayload {
  errors: [UpdateSchoolStringError!]!
}

"""Autogenerated return type of UpdateStudentDetails."""
type UpdateStudentDetailsPayload {
  success: Boolean!
}

"""Autogenerated return type of UpdateTarget."""
type UpdateTargetPayload {
  sortIndex: Int
}

"""Autogenerated return type of UpdateTeam."""
type UpdateTeamPayload {
  team: Team
}

"""Autogenerated return type of UpdateTopicCategory."""
type UpdateTopicCategoryPayload {
  success: Boolean!
}

"""Autogenerated return type of UpdateTopic."""
type UpdateTopicPayload {
  success: Boolean!
}

"""Autogenerated return type of UpdateUser."""
type UpdateUserPayload {
  success: Boolean!
}

type User {
  affiliation: String
  avatarUrl: String
  currentStandingName: String
  email: String!
  fullTitle: String!
  id: ID!
  lastSeenAt: ISO8601DateTime
  name: String!
  preferredName: String
  taggings: [String!]!
  title: String!
}

type UserProxy {
  avatarUrl: String
  fullTitle: String!

  """The ID returned by the type can represent different user role types"""
  id: ID!
  name: String!
  preferredName: String
  userId: ID!
}

type UserStanding {
  createdAt: ISO8601DateTime!
  creatorName: String!
  id: ID!
  reason: String!
  standingColor: String!
  standingName: String!
}

type VimeoVideo {
  link: String!
  uploadLink: String!
}

